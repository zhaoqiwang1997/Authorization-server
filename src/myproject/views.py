from .models import Card, Company, User
from django.http import JsonResponse
from .serializers import UserSerializer
from .serializers import CardSerializer
from .serializers import CompanySerializer
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from datetime import datetime


@api_view(['GET'])
def get_user_info(response, company, name):
    # find the user and company
    try:
        user = User.objects.get(user_name=name, com_name=company)
    except User.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    # return Json content
    serializer = UserSerializer(user)
    return JsonResponse(serializer.data, safe=False)

@api_view(['GET'])
def get_card_info(response, company, name, card):
    # find the user and company
    try:
        user = User.objects.get(user_name=name, com_name=company)
    except User.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    # find the card
    try:
        card = Card.objects.get(pk=card)
    except Card.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    user_serializer = UserSerializer(user)
    card_serializer = CardSerializer(card)
    
    # check permission (admin/normal)
    if user.com_name == card.com_name:
        if user.user_permission == "admin":
            return JsonResponse({'user':user_serializer.data, 'card':card_serializer.data}, safe=False)
        elif user.user_name == card.user_name and card.card_number in user.user_cards:
            return JsonResponse({'user':user_serializer.data, 'card':card_serializer.data}, safe=False)

    return Response(status=status.HTTP_401_UNAUTHORIZED)

@api_view(['GET','POST'])
def modify_limit(response, company, name, card_number, new_limit):
    # find the user and company
    try:
        user = User.objects.get(user_name=name, com_name=company)
    except User.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)
    # find the card
    try:
        card = Card.objects.get(pk=card_number)
    except Card.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)
    
    user_serializer = UserSerializer(user)
    card_serializer = CardSerializer(card)

    # check permission (admin/normal)
    if user.com_name == card.com_name:
        if user.user_permission == "admin":

            Card.objects.filter(pk=card_number).update(limit=new_limit)
            updated_card = Card.objects.get(pk=card_number)
            updated_card_serializer = CardSerializer(updated_card)
            return JsonResponse({'user': user_serializer.data, 'card limit': card_serializer.data, 'updated limit': updated_card_serializer.data}, safe=False)

    return Response(status=status.HTTP_401_UNAUTHORIZED)

@api_view(['GET','POST'])
def create_card(response, number, name, company, expiration_date, masked_number, limit, balance, permission):
    # check if the card exists
    if not Card.objects.filter(card_number=number).exists():
        expiration = datetime.strptime(expiration_date, '%Y-%m-%d').date()
        card_attributes = {
            "card_number": number,
            "user_name": name,
            "com_name": company,
            "expiration_data": expiration,
            "masked_number": masked_number,
            "limit": limit,
            "balance": balance,
        }
        card = Card.objects.create(**card_attributes)
        card_serializer = CardSerializer(card)

        # update company (assume there are and there are only 2 companies generated by superuser)
        com = Company.objects.get(pk=company)
        com_serializer= CompanySerializer(com)
        cards_list = com_serializer.data['cards']
        cards_list.append(number)
        Company.objects.filter(pk=company).update(cards=cards_list)

        # update user
        if User.objects.filter(user_name=name, com_name=company).exists():
            # if the user exists, update its "cards" filed
            user = User.objects.get(user_name=name, com_name=company)
            user_serializer= UserSerializer(user)
            cards = user_serializer.data['user_cards']
            cards.append(number)
            User.objects.filter(user_name=name, com_name=company).update(user_cards=cards)
            return JsonResponse({'card':card_serializer.data, 'user':user_serializer.data, 'company':com_serializer.data}, safe=False)
        else:
            # if the user not exists, create a new user
            user_attributes = {
            "user_name": name,
            "com_name": company,
            "user_cards": [number],
            "user_permission": permission,
            }
            user = User.objects.create(**user_attributes)
            user_serializer = UserSerializer(user)

            # update company
            users_list = com_serializer.data['users']
            users_list.append(name)
            Company.objects.filter(pk=company).update(users=users_list)
            return JsonResponse({'card':card_serializer.data, 'user':user_serializer.data, 'company':com_serializer.data}, safe=False)
            
    return Response(status=status.HTTP_409_CONFLICT)